_______________________________________8. Практика (SQL и Join'ы)_____________________________________________
_______________________________Отношение Один ко Многим (One to Many)_________________________________
create table Director(
   director_id int GENERATED BY DEFAULTS AS IDENTITY PRIMARY KEY,
   name varchar (100) NOT NULL UNIQUE,
   age int CHECK (age>10)
)

create table Movie(
movie_id nt GENERATED BY DEFAULTS AS IDENTITY PRIMARY KEY,
director_id int NOT NULL REFERENCES Director(director_id),  <--- Обозначение внешней связи с таблице Director и столбцом director_id
name varchar(200) NOT NULL,
year_of_production int CHECK (year-of-production > 1900)
)

INSERT INTO Director(name, age) VALUES ('Quentin Tarantino',57);
INSERT INTO Director(name, age) VALUES ('Martin Scorsese',78);
INSERT INTO Director(name, age) VALUES ('Guy Ritchie',52);
INSERT INTO Director(name, age) VALUES ('Woody Allen',85);
INSERT INTO Director(name, age) VALUES ('David Lynch',74);
INSERT INTO Director(name, age) VALUES ('Christopher Nolan',50);

select * from director;

INSERT INTO Movie(director_id, name, year_of_production) VALUES (1,'Reservoir Dogs',1992);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1,'Pulp Fiction',1994);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1,'The Hateful Eight',2015);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1,'Once Upon a Time in Hollywood',2019);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2,'Taxi Driver',1976);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2,'Goodfellas',1990);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2,'The Wolf of Wall Street',2013);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (3,'Lock, Stock and Two Smoking Barrels',1992);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (3,'Snatch',2000);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (4,'Midnigt in Paris',2011);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (6,'Inception',2010);

select * from movie;

select Director.name,movie.name from director join movie on director.director_id = movie.director_id;

select Director.name,movie.name from director left join movie on director.director_id = movie.director_id;

_______________________________Отношение Один к Одному (One to One)__________________________________

create table Citizen(
    citizen_in int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    name varchar(100) NOT NULL,
    age int CHECK ( age>0 )
)

create table Passport(
    citizen_id int PRIMARY KEY REFERENCES citizen(citizen_in),
    passpotn_number int
)

INSERT INTO Citizen(name, age) VALUES ('Bob',12);
INSERT INTO Citizen(name, age) VALUES ('Tom',24);
INSERT INTO Citizen(name, age) VALUES ('Katy',39);
INSERT INTO Citizen(name, age) VALUES ('Alice',45);

INSERT INTO Passport(citizen_id, passpotn_number) VALUES (1,12345);
INSERT INTO Passport(citizen_id, passpotn_number) VALUES (2,75124);
INSERT INTO Passport(citizen_id, passpotn_number) VALUES (3,91245);
INSERT INTO Passport(citizen_id, passpotn_number) VALUES (4,19259);

select * from passport;

select * from citizen;

select name, passpotn_number from citizen join public.passport p on citizen.citizen_in = p.citizen_id;

insert into Citizen(name, age) VALUES ('Jane', 1);

select name, passpotn_number from citizen left join public.passport p on citizen.citizen_in = p.citizen_id;

_____________________________Отношение Многие ко Многим (Many to Many)_______________________________

create table Actor(
    actor_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    name varchar(100) NOT NULL UNIQUE ,
    age int CHECK ( age >0 )
)

INSERT INTO Actor(name, age) VALUES ('Havey Keitel',81);
INSERT INTO Actor(name, age) VALUES ('Robert De Niro',77);
INSERT INTO Actor(name, age) VALUES ('Leonardo DiCaprio',46);
INSERT INTO Actor(name, age) VALUES ('Jason Statham',53);
INSERT INTO Actor(name, age) VALUES ('Joe Pesci',77);
INSERT INTO Actor(name, age) VALUES ('Samues L. Jackson',72);

select * from actor;

create table Actor_Movie(
    actor_in int REFERENCES Actor (actor_id),
    movie_id int REFERENCES Movie (movie_id),           <--- Связывающая таблица
    PRIMARY KEY (actor_in,movie_id)
)

INSERT INTO actor_movie VALUES (1,1);
INSERT INTO actor_movie VALUES (1,2);
INSERT INTO actor_movie VALUES (2,5);
INSERT INTO actor_movie VALUES (2,6);
INSERT INTO actor_movie VALUES (3,4);
INSERT INTO actor_movie VALUES (3,7);
INSERT INTO actor_movie VALUES (3,11);             <--- Добавление значений в связывающую таблицу
INSERT INTO actor_movie VALUES (3,8);
INSERT INTO actor_movie VALUES (4,9);
INSERT INTO actor_movie VALUES (5,6);
INSERT INTO actor_movie VALUES (6,2);
INSERT INTO actor_movie VALUES (6,3);

Первый Join объединяет связывающую таблицу с таблицей Actor
select Actor.name, Movie.name FROM Actor JOIN actor_movie on Actor.actor_id = actor_movie.actor_in
Далее на получившейся таблице делаем сразу еще один Join и получаем конечную связывающую таблицу,
в итоге получается вот такой запрос:
select Actor.name, Movie.name FROM Actor JOIN actor_movie
    on Actor.actor_id = actor_movie.actor_in JOIN movie ON actor_movie.movie_id = movie.movie_id;
