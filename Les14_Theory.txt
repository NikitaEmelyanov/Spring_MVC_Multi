Что такое Spring MVC?
1) Один из компонентов Spring Framework, который позволяет разрабатывать web приложения
- приложения на Java
2) Spring MVC предполагает разработку web-приложений с использованием архитектуры
Model - View - Controller
3)Разрабатывая web-приложения с помощью Spring MVC, мы можем использовать все, что
дает нам Spring Core - бины, DI и так далее

MVC (Model-View-Controller)
                                            HTTP request
                                               |
               Database    <---  Model  <--- Controller ---> View (Presentation)
                           --->         --->            <---
                (Interact with Database)

MVC - паттерн проектирования приложений
Model - логика работы с данными
View - Логика представления, интерфейс
Controller - Логика навигации, обработка запросов

Из чего состоит Spring MVC приложение ?
1) Из обычных Java классов (контроллеры, модели, и прочее). Очень активно
используются аннотации, который применяются к классам и дают им дополнительные
возможности (например, аннотация @Controller)
2) Набор HTML страниц (представления). К ним часто добавляется JavaScript код,
который "оживляет" HTML представления и CSS, который стилизует HTML.
3) Spring конфигурация (XML, Аннотации или Java)

DispatcherServlet
                                         HTTP request
                                          | <----DispatcherServlet
          Database    <---  Model  <--- Controller ---> View (Presentation)
                      --->         --->            <---
       (Interact with Database)
1) DispatcherServlet - является входной точкой Spring MVC приложения
2) Реализован за нас командой Spring
3) Мы реализуем Модели, представления и контроллеры (MVC)

HTTP запросы от пользователя
1) Приходит на сервер. Сервер обрабатывает запрос и передает его в Spring MVC приложение
2) Запрос попадает в DispatcherServlet
3) DispatcherServlet отправляет запрос на правильный контроллер

Контроллер (Controller) - Реализуется нами
1) Обрабатывает запросы от пользователя
2) Обменивается данными с моделью
3) Показывает пользователю правильное представление
4) Переадресовывает пользователя на другие страницы

Модель (Model) - Реализуется нами
1) Хранит в себе данные
2) Взаимодействует с БД для получения данных
3) Отдает данные контроллеру

Представление (View) - Реализуется нами
1) Получает данные от контроллера и отображает их в браузере
2) Для динамического отображения данных используются шаблонизаторы
(Thymeleaf, Freemarker, Velocity)