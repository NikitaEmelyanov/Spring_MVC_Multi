 ________________________5. Протокол HTTP. Методы GET и POST________________________________________

_____________________________________Клиент - сервер________________________________________________
         HTTP - запрос (Request)    Spring
Клиент ---------------------------> Сервер
       <---------------------------
         HTTP - ответ (Response)      URL
                           (Uniform Resource Locator)
                                 localhost:8080


______________________________HTTP - запрос (Request) Структура_____________________________________
             Метод Запроса         Адрес           Используемый протокол
                           \         |            /
                            GET /wiki/java HTTP/1.1    <--- Стартовая строка
                            Host: ru.wikipedia.org
                            User-Agent: Mozilla/5.0    <--- Заголовки (Headers)
                              Accept% text/html
     Пустая строка                    ...
  разделяет заголовки  --->
         и тело              k1=v1 & k2=v2 & k3=v3     <--- Тело (Body)
                                                  \
                                             Может быть пустым

__________________________________Методы HTTP - запроса_____________________________________________
Методы дают понять серверу, что хочет сделать клиент
GET               POST              PUT              PATCH                 DELETE
   \             /
Самые используемые методы

_______________________________GET - запрос (англ. Получить)________________________________________
1) Самый используемый запрос (переход по адресу, переход по ссылке, поисковой запрос, открытие видео
и так далее)
2) Идемпотентный (Ничего не меняет на сервере)
3) Тело запроса пустое
4) Параметры GET-запроса передаются в самом URL после знака ? в формате ключ=значение
(Тело GET-запроса всегда пустое). Пример: https://vk.com/audios33064131?q=Gersgwin&section=playlists
5) Несколько параметров (пар ключ=значение разделяются знаком &)
Параметры нужны для передачи информации от клиента к серверу во время запроса

_____________________________POST - запрос (англ. Публиковать)______________________________________
1) Цель запроса - изменить что-то на сервере (чаще всего - добавить что-нибудь)
2) Часто используется для отправки данных с веб форм, но не только для этого (создать новую учетную
 запись, твитнуть что-нибудь, добавить запись в сообщество, загрузить фото в IG и так далее)
3) Все параметры хранятся в теле запроса
4) Все параметры закодированы в теле запроса (при этом адрес остается неизменным)
5) Content-Type может быть разный (JSON, XML и так далее)
6) в зависимости от Content-Type меняется и формат данных в теле запроса

                                           Сравнение
____________________________________________________________________________________________________
|                 GET                          |                       POST                        |
|  1) Нужен для получения данных с сервера     | 1) Нужен для изменения данных на сервере          |
|  2) Тело запроса всегда пустое               | 2) Тело запроса может содержать различные данные  |
|  3) URL может содержать параметры            | 3) URL не содержит параметры (они в теле)         |
|  4) Можем передать только пары ключ=значение | 4) Можем передавать различные данные              |
|                                              | (Пары ключ=значение, Java объекты, файлы и т.д.)  |
----------------------------------------------------------------------------------------------------

___________________________________HTTP-ответ (response) Структура_________________________________
             Используемый протокол          Код ответа
                               \           /
           Тип контента в      HTTP/1.1 200 OK        <--- Стартовая строка
           теле ответа   \   Date: Web,17 Jun 2020
                          \     Server: Apache         <--- Заголовки (Headers)
                            Content-Type: text/html
     Пустая строка                    ...
  разделяет заголовки  --->
         и тело              <h1> Hello world!<h1>     <--- Тело (Body)

______________________________HTTP-ответ (response) Статус ответа___________________________________
1) 200 - Все хорошо
2) 3__ - Редирект (Необходимость перейти на другую страницу)
3) 4__ - Ошибка клиента (404)
4) 5__ - Ошибка сервера (500)
_____________________HTTP-ответ (response) Тип содержимого (Content Type)___________________________
1) text/html
2) text/css
3) text/xml
4)Application/json
5)...