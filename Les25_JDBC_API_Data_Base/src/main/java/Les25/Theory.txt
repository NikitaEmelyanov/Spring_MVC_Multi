_______________________________________________PostgreSQL_____________________________________________
1) Одна из самых популярных реляционных БД
2) Бесплатная и с открытым кодом
3) Более "навороченная" чем MySQL
Можно использовать любую реляционную БД (ту же MySQL). Код будет по большей части совпадать
(Нужен будет лишь другой JDBC драйвер)

_____________________________________Связь Java приложения с БД_______________________________________
 person1
  id: 1
 name:Tom                          id  |  name                Реляционные БД хранят объекты в виде
          \                        ____|_______               строк в таблице
 person2      JDBC API             1   |   Tom
  id: 2  -- JdbcTemplate   --->    2   |   Bob
 name:Bob     Hibernate            3   |  Alice
          /                      (3 rows)
 person3
  id: 3                          Таблица Person в БД
name:Alice

Java объекты

1) JDBC API - самый низкоуровневый (сами делаем все запросы к БД и сами переводим JAva объекты в
строки таблицы и наоборот)
2)JdbcTemplate - тонкая обертка вокруг JDBC API. Часть Spring Framework. Предоставляет некоторые
абстракции, берет часть дел на себя
3) Hibernate - самый высокий уровень абстракции. Праактически не пишем в ручную запросы к БД.
Автоматически переводит Java объекты в строки таблицы и наоборот. Может автоматически создавать
таблицы в БДна основании наших Java классов. Этот функционал называется ORM
(англ. Object-Relational Mapping).

___________________________________Как подключиться к БД ?__________________________________________
1) Запускаем БД (локально или удаленно)
2) У работающей БД есть свой адрес (как и у сервера, localhost:8080/hello-world)
3) Адрес БД: url=jdbc:postgresql://localhost5432/db_name
username=postgres
password=
4) Используем JDBC драйвер, чтобы подключиться к БД с указанным адресом
5) Можем делать запросы к БД из Java приложения

___________________________________Базовые SQL команды______________________________________________
|      DDL(Data Definition Language)       |             DML (Data Manipulation Language)          |
|---------------------------------------------------------------------------------------------------
| 1) CREATE DATABASE db_name;              |  1) SELECT id, name FROM table_name;                  |
| 2) DROP DATABASE db_name;                |  2) SELECT * FROM table_name                          |
| 3) CREATE TABLE table_name (             |  3) INSERT INTO Person (id,name) VALUES (1, 'Tom');   |
|       id int,                            |  4) UPDATE Person SET name='Tom123' WHERE id=1;       |
|       name varchar                       |  5) DELETE FROM Person WHERE id=1;                    |
|    );                                    |                                                       |
| 4) DROP TABLE table_name;                |                                                       |
----------------------------------------------------------------------------------------------------
              Обновленный вид CRUD приложения с использованием Базы данных
                                                  CRUD
      View ---> PeopleController ---> PersonalDAO ---> JDBC API ---> PostgreSQL
           <---    Controller    <---    |   |    <---          <---
                                         |   |
                                         Person
                                         Model
