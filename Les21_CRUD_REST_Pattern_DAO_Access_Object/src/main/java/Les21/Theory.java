package Les21;

/**
 * 8. CRUD, REST, Паттерн DAO (Data Access Object).
 */

public class Theory {

    }

//_____________________________________________CRUD_________________________________________________
// Стандартная классификация функций  по манипуляции данных
//-CREATE
//-READ           Четыре базовые функции, используемые при работе с базами данных
//-UPDATE
//-DELETE
//CRUD приложение - это приложение, которое позволяет добавлять (CREATE), читать (READ), обновлять
// (UPDATE) и удалять (DELETE) данные

//                  CREATE, UPDATE, DELETE
// CRUD Приложение -----------------------> БД
//                 <-----------------------
//                            READ

// Чаще всего CRUD приложения являются Web-приложениями. То есть, доступ к БД предоставляется
// через протокол HTTP

//                  POST, PATCH, DELETE                          CRUD
//    Клиент      ----------------------->   CRUD Приложение   --------->  БД
//(через браузер  <-----------------------   (на Web сервере)  <---------
//    например)            GET

//Большинство Web-приложений - CRUD приложения

//__________________________________Пример CRUD'а для сущности Post_________________________________
//     HTTP метод        |          URL            |                      Действие                 |
//        GET            |         /posts          |  Получаем все записи (READ)                   |
//        POST           |         /posts          |  Создаем новую запись (CREATE)                |
//        GET            |        /posts/new       |  HTML форма создания записи                   |
//        GET            |      /posts/:id/edit    |  HTML форма редактирования записи             |
//        GET            |        /posts/:id       |  Получаем одну запись                         |
//        PATCH          |        /posts/:id       |  Обновляем запись                             |
//        DELETE         |        /posts/:id       |  Удаляем запись                               |
//--------------------------------------------------------------------------------------------------

//_____________________Почему именно такие URL'ы и HTTP методы ?  ---> REST_________________________
//1) REST - это паттерн проектирования web-приложений
//2) REST описывает то, как посредством протокола HTTP должен взаимодействовать клиент с сервером
//3) Все взаимодействие с сервером сводится к 4 операциям - получение данных, добавление новых данных,
// изменение существующих данных, удаление данных
//4) Для каждой из 4 операций используется свой HTTP метод - GET, POST, PATCH, DELETE
//5) Это не все правила и ограничения, которые описаны в REST. Есть множество других

//___________________________________Сравнение REST и CRUD___________________________________________
//CRUD - четыре базовые функции, используемые при работе с базами данных
//REST - паттерн проектирования web-приложений . Описывает как по протоколу HTTP взаимодействовать с
// сервером для чтения, добавления, изменения, удаления данных. Описывает, какие URL'ы, HTTP
// методы использовать, но не только)
//Связь между REST и CRUD
//  GET     --->   /users       <---    READ
//  GET     --->   /users:id    <---    READ
//  POST    --->   /users       <---    CREATE
//  PATCH   --->   /users:id    <---    UPDATE
//  DELETE  --->   /users:id    <---    DELETE

//_____________________________Что будем делать на этом уроке ?_____________________________________
//Начнем реализовывать CRUD приложение для сущности Person

//   GET /people                                         CREATE, UPDATE, DELETE
//  GET /people/:id        PeopleController ---> Person -----------------------> PeopleDB
//                             Controller         Model <-----------------------
//                                                                  READ
//На этом уроке реализуем операцию READ

//_________________________Связь с БД Паттерн DAO (Data Access Object)______________________________
// Плохо когда модель напрямую взаимодействует с БД. Мы хотим вынести логику взаимодействия с БД из
// самой модели в отдельный класс. Паттерн проектирования, когда отдельный класс занимается
// взаимодействием с БД для конкретной сущности называется DAO.

//             CREATE, UPDATE, DELETE              1) Вся логика работы с БД для модели Person
// PersonDAO  -----------------------> PeopleDB    инкапсулируется в класс PersonDAO
//   |   |    <-----------------------             2) В DAO классах обычно пишется SQL код для работы
//   |   |               READ                      с БД приложения (чтение, запись, обновление,
//   |   |                                         удаление)
//   Person                                        3) Есть другой паттерн взаимодействия с БД -
//   Модель                                        репозиторий (англ. repository). Его мы будем
//                                                 изучать, когда дойдем до Hibernate и Spring Data
// JPA. Этот паттерн предоставляет большую абстракцию над БД, чем DAO.

//__________________________________Конечный вид CRUD приложения____________________________________

//                                                  CRUD
//      View ---> PeopleController ---> PersonalDAO ---> ArrayList<Person>
//           <---    Controller    <---    |   |    <--- Временно (потом
//                                         |   |         заменим на
//                                         Person        настоящую БД)
//                                         Model